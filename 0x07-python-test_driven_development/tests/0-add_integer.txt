The ``0-add_integer`` module
=============================

Using  ``add_integer``
------------------------
First import ``add_integer`` from ``0-add_integer`` module

case 1: function works with two integer arguments

	>>> add_integer = __import__('0-add_integer').add_integer
	>>> add_integer(1, 2)
	3

case 2: function works with just one int argument

	>>> add_integer(2)
	100

case 3: function works float and int

	>>> add_integer(100.3, -2)
	98

	>>> add_integer(2, 2.5)
	4

case 4: function works with float and float

	>>> add_integer(2.1, 2.2)
	4

case 5: function raise TypeError when string is passed

	>>> add_integer("base", 5)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer(5, "base")
	Traceback (most recent call last):
	TypeError: b must be an integer

	>>> add_integer("test", "test")
        Traceback (most recent call last):
        TypeError: a must be an integer

case 6: function raises TypeError when None is passed

	>>> add_integer(None)
	Traceback (most recent call last):
        TypeError: a must be an integer

	>>> add_integer(2, None)
	Traceback (most recent call last):
        TypeError: b must be an integer

	>>> add_integer(None, None)
	Traceback (most recent call last):
        TypeError: a must be an integer

case 7: funtion raises ValueError when Nan numbers are passed

	>>> add_integer(float('nan'))
        Traceback (most recent call last):
        ValueError: cannot convert float NaN to integer

	>>> add_integer(2, float('nan'))
        Traceback (most recent call last):
        ValueError: cannot convert float NaN to integer

case 8: function raises OverflowError when infinity is passed

	>>> add_integer(float('inf'))
        Traceback (most recent call last):
        OverflowError: cannot convert float infinity to integer

        >>> add_integer(4, float('inf'))
        Traceback (most recent call last):
        OverflowError: cannot convert float infinity to integer
